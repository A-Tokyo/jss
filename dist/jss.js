!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.jss=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = require('./lib/index')

},{"./lib/index":4}],2:[function(require,module,exports){
'use strict'

var uid = 0

/**
 * Rule is selector + style hash.
 *
 * @param {String} [selector]
 * @param {Object} style
 * @api public
 */
function Rule(selector, style) {
    if (typeof selector == 'object') {
        style = selector
        selector = null
        this.className = Rule.NAMESPACE_PREFIX + '-' + uid
        uid++
    }

    this.selector = selector || ('.' + this.className)
    this.style = style
    this.text = this.toString()
}

module.exports = Rule

Rule.NAMESPACE_PREFIX = 'jss'

/**
 * Extract scoped rules from the current rule.
 *
 * @return {Array}
 * @api private
 */
Rule.prototype.extractScopedRules = function () {
    var rules = []
    var style = this.style

    for (var prop in style) {
        if (prop[0] == '&') {
            var newProp = prop.substr(1)
            rules.push(new Rule(this.selector + newProp, style[prop]))
            delete style[prop]
        }
    }

    return rules
}

/**
 * Converts the rule to css string.
 *
 * @return {String}
 * @api public
 */
Rule.prototype.toString = function () {
    var str = this.selector + '{'
    var style = this.style

    for (var prop in style) {
        var value = style[prop]
        if (typeof value == 'number') value += 'px'
        if (prop[0] != ' ') str += prop + ':' + value + ';'
    }

    str += '}'

    return str
}

},{}],3:[function(require,module,exports){
'use strict'

var Rule = require('./Rule')

/**
 * Creates style element, contains rules, injects style into dom.
 *
 * @param {Object} [rules] object with selectors and declarations
 * @param {Object} [attributes] style element attributes
 * @api public
 */
function Style(rules, attributes) {
    this.element = null
    this.rules = {}
    this.attributes = attributes || {}
    if (!this.attributes.type) this.attributes.type = 'text/css'
    if (!this.attributes.media) this.attributes.media = 'screen'
    if (!this.attributes.title) this.attributes.title = 'Generated by jss.'

    for (var selector in rules) {
        this.rules[selector] = new Rule(selector, rules[selector])
        this.rules[selector].extractScopedRules().forEach(function (rule) {
            this.rules[rule.selector] = rule
        }, this)
    }

    this.text = this.toString()
    this.attached = false
}

module.exports = Style

/**
 * Insert style element to render tree.
 *
 * @api public
 * @return {Style}
 */
Style.prototype.attach = function () {
    if (this.attached) return this

    if (!this.element) this.element = this.createElement()
    this.element.innerHTML = this.text
    if (!this.element.parentNode) document.head.appendChild(this.element)
    this.attached = true

    return this
}

/**
 * Remove style element from render tree.
 *
 * @return {Style}
 * @api public
 */
Style.prototype.detach = function () {
    if (!this.attached) return this

    this.element.parentNode.removeChild(this.element)
    this.attached = false

    return this
}

/**
 * Add a rule.
 *
 * @param {Object} [selector] if you don't pass selector - it will be generated
 * @param {Object} style property/value hash
 * @return {Style}
 * @api public
 */
Style.prototype.addRule = function (selector, style) {
    var rule = new Rule(selector, style)
    var sheet = this.element.sheet
    sheet.insertRule(rule.text, sheet.cssRules.length)
    this.rules[rule.selector] = rule
    return rule
}

/**
 * Get a rule.
 *
 * @param {String} selector
 * @return {Rule}
 * @api public
 */
Style.prototype.getRule = function (selector) {
    return this.rules[selector]
}

/**
 * Convert rules to a css string.
 *
 * @api public
 * @return {String}
 */
Style.prototype.toString = function () {
    var str = ''
    var rules = this.rules

    for (var selector in rules) {
        str += rules[selector].text + '\n'
    }

    return str
}

/**
 * Create style element.
 *
 * @api private
 * @return {Element}
 */
Style.prototype.createElement = function () {
    var el = document.createElement('style')
    for (var name in this.attributes) el.setAttribute(name, this.attributes[name])

    return el
}

},{"./Rule":2}],4:[function(require,module,exports){
/**
 * Stylesheets written in javascript.
 *
 * @copyright Oleg Slobodskoi 2014
 * @website https://github.com/kof/jss
 * @license MIT
 */

'use strict'

var Style = require('./Style')
var Rule = require('./Rule')

exports.Style = Style

exports.Rule = Rule

/**
 * Create a stylesheet.
 *
 * @param {Object} rules
 * @param {Object} [attributes] style element attributes
 * @return {Style}
 * @api public
 */
exports.createStyle = function (rules) {
    return new Style(rules)
}

/**
 * Create a rule.
 *
 * @param {String} [selector]
 * @param {Object} style
 * @return {Rule}
 * @api public
 */
exports.createRule = function (selector, style) {
    return new Rule(selector, style)
}

},{"./Rule":2,"./Style":3}]},{},[1])(1)
});