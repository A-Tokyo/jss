!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.jss=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

var uid = 0

/**
 * Rule is selector + style hash.
 *
 * @param {String} [selector]
 * @param {Object} style
 * @api private
 */
function Rule(selector, style) {
    if (typeof selector == 'object') {
        style = selector
        selector = null
        this.className = Rule.NAMESPACE_PREFIX + '-' + uid
        uid++
    }

    this.selector = selector || ('.' + this.className)
    this.style = style
    this.text = this.toString()
}

module.exports = Rule

Rule.NAMESPACE_PREFIX = 'jss'

/**
 * Converts the rule to css string.
 *
 * @return {String}
 * @api public
 */
Rule.prototype.toString = function () {
    var str = this.selector + '{'
    var style = this.style

    for (var prop in style) {
        var value = style[prop]
        if (typeof value == 'number') value += 'px'
        str += prop + ':' + value + ';'
    }
    str += '}'

    return str
}



},{}],2:[function(require,module,exports){
'use strict'

var Rule = require('./Rule')

/**
 * Creates style element, contains rules, injects style into dom.
 *
 * @param {Object} rules object with selectors and declarations
 * @param {Object} style element attributes
 * @api public
 */
function Style(rules, attributes) {
    this.element = null
    this.rules = {}
    this.attributes = attributes || {}
    if (!this.attributes.type) this.attributes.type = 'text/css'
    if (!this.attributes.media) this.attributes.media = 'screen'
    if (!this.attributes.title) this.attributes.title = 'Generated by jss.'

    for (var selector in rules) {
        this.rules[selector] = new Rule(selector, rules[selector])
    }
    this.text = this.toString()
}

module.exports = Style

/**
 * Insert style element to render tree.
 *
 * @api public
 * @return {Style}
 */
Style.prototype.attach = function () {
    this.element || (this.element = this.createElement())
    this.element.innerHTML = this.text
    if (!this.element.parentNode) document.head.appendChild(this.element)

    return this
}

/**
 * Remove style element from render tree.
 *
 * @return {Style}
 * @api public
 */
Style.prototype.detach = function () {
    this.element.parentNode.removeChild(this.element)

    return this
}

/**
 * Add a rule to style.
 *
 * @param {Rule} rule
 * @return {Style}
 * @api public
 */
Style.prototype.addRule = function (rule) {
    this.rules[rule.selector] = rule
    var sheet = this.element.sheet
    sheet.insertRule(rule.text, sheet.cssRules.length)

    return this
}

/**
 * Convert rules to a css string.
 *
 * @api public
 * @return {String}
 */
Style.prototype.toString = function () {
    var str = ''
    var rules = this.rules

    for (var selector in rules) {
        str += rules[selector].text
    }

    return str
}

/**
 * Create style element.
 *
 * @api private
 * @return {Element}
 */
Style.prototype.createElement = function () {
    var el = document.createElement('style')
    for (var name in this.attributes) el.setAttribute(name, this.attributes[name])

    return el
}

},{"./Rule":1}],3:[function(require,module,exports){
'use strict'

var Style = require('./Style')
var Rule = require('./Rule')

var mainStyle = new Style()

/**
 * Create a stylesheet.
 *
 * @param {Object} rules
 * @return {Style}
 * @api public
 */
exports.createStyle = function (rules) {
    return new Style(rules)
}

/**
 * Create a namespaced css rule.
 *
 * @param {Object} style
 * @return
 * @api public
 */
exports.createRule = function (style) {
    var rule = new Rule(style)
    mainStyle.attach().addRule(rule)
    return rule
}

},{"./Rule":1,"./Style":2}]},{},[3])(3)
});