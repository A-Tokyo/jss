'use strict'

var Rule = require('./Rule')

/**
 * Creates style element, contains rules, injects style into dom.
 *
 * @param {Object} rules object with selectors and declarations
 * @param {Object} style element attributes
 * @api public
 */
function Style(rules, attributes) {
    this.element = null
    this.rules = {}
    this.attributes = attributes || {}
    if (!this.attributes.type) this.attributes.type = 'text/css'
    if (!this.attributes.media) this.attributes.media = 'screen'
    if (!this.attributes.title) this.attributes.title = 'Generated by jss.'

    for (var selector in rules) {
        this.rules[selector] = new Rule(selector, rules[selector])
    }
    this.text = this.toString()
}

module.exports = Style

/**
 * Insert style element to render tree.
 *
 * @api public
 * @return {Style}
 */
Style.prototype.attach = function () {
    if (!this.element) this.element = this.createElement()
    this.element.innerHTML = this.text
    if (!this.element.parentNode) document.head.appendChild(this.element)

    return this
}

/**
 * Remove style element from render tree.
 *
 * @return {Style}
 * @api public
 */
Style.prototype.detach = function () {
    this.element.parentNode.removeChild(this.element)

    return this
}

/**
 * Add a rule to style.
 *
 * @param {Rule} rule
 * @return {Style}
 * @api public
 */
Style.prototype.addRule = function (rule) {
    this.rules[rule.selector] = rule
    var sheet = this.element.sheet
    sheet.insertRule(rule.text, sheet.cssRules.length)

    return this
}

/**
 * Convert rules to a css string.
 *
 * @api public
 * @return {String}
 */
Style.prototype.toString = function () {
    var str = ''
    var rules = this.rules

    for (var selector in rules) {
        str += rules[selector].text
    }

    return str
}

/**
 * Create style element.
 *
 * @api private
 * @return {Element}
 */
Style.prototype.createElement = function () {
    var el = document.createElement('style')
    for (var name in this.attributes) el.setAttribute(name, this.attributes[name])

    return el
}
