'use strict'

var Rule = require('./Rule')

/**
 * Stylesheet abstraction, contains rules, injects stylesheet into dom.
 *
 * @param {Object} [rules] object with selectors and declarations
 * @param {Boolean} [named] rules have names if true, class names will be generated.
 * @param {Object} [attributes] stylesheet element attributes
 * @api public
 */
function Stylesheet(rules, named, attributes) {
    if (typeof named == 'object') {
        attributes = named
        named = false
    }
    this.element = null
    this.attached = false
    this.named = named || false
    this.rules = {}
    this.attributes = attributes || {}
    this.classes = {}
    this.text = ''
    this.element = this.createElement()
    if (!this.attributes.type) this.attributes.type = 'text/css'
    if (!this.attributes.media) this.attributes.media = 'screen'
    if (!this.attributes.title) this.attributes.title = 'Generated by jss.'

    if (rules) this.createRules(rules)


}

module.exports = Stylesheet

/**
 * Insert stylesheet element to render tree.
 *
 * @api public
 * @return {Stylesheet}
 */
Stylesheet.prototype.attach = function () {
    if (this.attached) return this

    if (!this.text) {
        this.text = this.toString()
        this.element.innerHTML = '\n' + this.text + '\n'
    }

    document.head.appendChild(this.element)
    this.attached = true

    return this
}

/**
 * Remove stylesheet element from render tree.
 *
 * @return {Stylesheet}
 * @api public
 */
Stylesheet.prototype.detach = function () {
    if (!this.attached) return this

    this.element.parentNode.removeChild(this.element)
    this.attached = false

    return this
}

/**
 * Add a rule to the current stylesheet. Will insert a rule also after the stylesheet
 * has been rendered first time.
 *
 * @param {Object} [key] can be selector or name if `this.named` is true
 * @param {Object} style property/value hash
 * @return {Rule}
 * @api public
 */
Stylesheet.prototype.addRule = function (key, style) {
    var rule = this.createRule(key, style)
    var sheet = this.element.sheet
    sheet.insertRule(rule.toString(), sheet.cssRules.length)

    return rule
}

/**
 * Create rules, will render also after stylesheet was rendered the first time.
 *
 * @param {Object} rules key:style hash.
 * @return {Stylesheet} this
 * @api public
 */
Stylesheet.prototype.addRules = function (rules) {
    for (var key in rules) {
        this.addRule(key, rules[key])
    }

    return this
}

/**
 * Get a rule.
 *
 * @param {String} key can be selector or name if `named` is true.
 * @return {Rule}
 * @api public
 */
Stylesheet.prototype.getRule = function (key) {
    return this.rules[key]
}

/**
 * Convert rules to a css string.
 *
 * @return {String}
 * @api public
 */
Stylesheet.prototype.toString = function () {
    var str = ''
    var rules = this.rules

    for (var key in rules) {
        if (str) str += '\n'
        str += rules[key].toString()
    }

    return str
}

/**
 * Create a rule, will not render after stylesheet was rendered the first time.
 *
 * @param {Object} [selector] if you don't pass selector - it will be generated
 * @param {Object} style property/value hash
 * @return {Rule}
 * @api private
 */
Stylesheet.prototype.createRule = function (key, style) {
    var selector, name
    if (this.named) name = key
    else selector = key
    var rule = new Rule(selector, style, this)
    this.rules[name || rule.selector] = rule
    if (this.named) this.classes[name] = rule.className
    rule.runPreprocessors()

    return rule
}

/**
 * Create rules, will not render after stylesheet was rendered the first time.
 *
 * @param {Object} rules key:style hash.
 * @return {Stylesheet} this
 * @api private
 */
Stylesheet.prototype.createRules = function (rules) {
    for (var key in rules) {
        this.createRule(key, rules[key])
    }

    return this
}

/**
 * Create stylesheet element.
 *
 * @api private
 * @return {Element}
 */
Stylesheet.prototype.createElement = function () {
    var el = document.createElement('style')
    for (var name in this.attributes) el.setAttribute(name, this.attributes[name])

    return el
}
