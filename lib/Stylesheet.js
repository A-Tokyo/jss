'use strict'

var Rule = require('./Rule')

/**
 * Stylesheet abstraction, contains rules, injects stylesheet into dom.
 *
 * @param {Object} [rules] object with selectors and declarations
 * @param {Object} [attributes] stylesheet element attributes
 * @api public
 */
function Stylesheet(rules, attributes) {
    this.element = null
    this.attached = false
    this.rules = {}
    this.attributes = attributes || {}
    if (!this.attributes.type) this.attributes.type = 'text/css'
    if (!this.attributes.media) this.attributes.media = 'screen'
    if (!this.attributes.title) this.attributes.title = 'Generated by jss.'

    if (rules) this.addRules(rules)
}

module.exports = Stylesheet

/**
 * Insert stylesheet element to render tree.
 *
 * @api public
 * @return {Stylesheet}
 */
Stylesheet.prototype.attach = function () {
    if (this.attached) return this

    if (!this.element) this.element = this.createElement()
    this.element.innerHTML = this.toString()
    if (!this.element.parentNode) document.head.appendChild(this.element)
    this.attached = true

    return this
}

/**
 * Remove stylesheet element from render tree.
 *
 * @return {Stylesheet}
 * @api public
 */
Stylesheet.prototype.detach = function () {
    if (!this.attached) return this

    this.element.parentNode.removeChild(this.element)
    this.attached = false

    return this
}

/**
 * Add a rule to the current stylesheet.
 *
 * @param {Object} [selector] if you don't pass selector - it will be generated
 * @param {Object} style property/value hash
 * @return {Stylesheet}
 * @api public
 */
Stylesheet.prototype.addRule = function (selector, style) {
    var rule = new Rule(selector, style, this)
    var sheet = this.element.sheet
    sheet.insertRule(rule.toString(), sheet.cssRules.length)
    this.rules[rule.selector] = rule

    return rule
}

/**
 * Add rules to the current stylesheet.
 *
 * @param {Object} rules key/value hash where key is selector, value is style.
 * @return {Stylesheet} this
 * @api public
 */
Stylesheet.prototype.addRules = function (rules) {
    for (var selector in rules) {
        var rule = new Rule(selector, rules[selector], this)
        this.rules[selector] = rule
        rule.runPreprocessors()
    }

    return this
}

/**
 * Get a rule.
 *
 * @param {String} selector
 * @return {Rule}
 * @api public
 */
Stylesheet.prototype.getRule = function (selector) {
    return this.rules[selector]
}

/**
 * Convert rules to a css string.
 *
 * @api public
 * @return {String}
 */
Stylesheet.prototype.toString = function () {
    var str = ''
    var rules = this.rules

    for (var selector in rules) {
        str += rules[selector].toString() + '\n'
    }

    return str
}

/**
 * Create stylesheet element.
 *
 * @api private
 * @return {Element}
 */
Stylesheet.prototype.createElement = function () {
    var el = document.createElement('style')
    for (var name in this.attributes) el.setAttribute(name, this.attributes[name])

    return el
}
