QUnit.module('Stylesheet')

test('create empty instance', function () {
    var ss = new jss.Stylesheet()
    equal(ss.attached, false)
    deepEqual(ss.attributes, {
        media: 'screen',
        title: 'Generated by jss.',
        type: 'text/css'
    })
    equal(ss.classes, null)
    equal(ss.element, null)
    equal(ss.generateClasses, false)
    deepEqual(ss.rules, {})
})

test('create instance with rules', function () {
    var ss = new jss.Stylesheet({a: {float: 'left'}})
    ok(ss.rules.a instanceof jss.Rule)
})

test('create instance with rules and generated classes', function () {
    var ss = new jss.Stylesheet({a: {float: 'left'}}, true)
    equal(typeof ss.classes.a, 'string')
    ok(ss.rules['.' + ss.classes.a] instanceof jss.Rule)
    ok(ss.generateClasses)
})

test('create instance with rules and attributes', function () {
    var ss = new jss.Stylesheet({a: {float: 'left'}}, {test: 1})
    ok(ss.rules.a instanceof jss.Rule)
    equal(ss.generateClasses, false)
    equal(ss.attributes.test, 1)
})

test('create instance with all params', function () {
    var ss = new jss.Stylesheet({a: {float: 'left'}}, true, {test: 1})
    equal(typeof ss.classes.a, 'string')
    ok(ss.rules['.' + ss.classes.a] instanceof jss.Rule)
    ok(ss.generateClasses)
    equal(ss.attributes.test, 1)
})

test('attach/detach', function () {
    var ss = new jss.Stylesheet({abc: {float: 'left'}}).attach()
    var style = document.getElementsByTagName('style')[0]
    ok(ss.attached)
    strictEqual(style, ss.element)
    equal(style.innerHTML, ss.toString())
    ss.detach()
    equal(ss.attached, false)
    equal(document.getElementsByTagName('style').length, 0)
})

test('addRule/getRule', function () {
    var ss = new jss.Stylesheet().attach()
    var rule = ss.addRule('aa', {float: 'left'})
    equal(ss.element.sheet.rules.length, 1)
    equal(ss.element.sheet.rules[0].cssText, 'aa { float: left; }')
    strictEqual(ss.rules.aa, rule)
    strictEqual(ss.getRule('aa'), rule)
    strictEqual(ss.rules.aa.stylesheet, ss)
    ss.detach()
})

test('addRules', function () {
    var ss = new jss.Stylesheet().attach()
    ss.addRules({aa: {float: 'left'}})
    ok(ss.rules.aa instanceof jss.Rule)
    ss.detach()
})

test('toString', function () {
    var ss = new jss.Stylesheet({a: {float: 'left', width: '1px'}})
    equal(ss.toString(), 'a {\n  float: left;\n  width: 1px;\n}')
})
